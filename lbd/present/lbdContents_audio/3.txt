The upper half is the work flow for a computer program be generated and executed. 
IR stands for Intermediate Representation. 
The lower half is this bookâ€™s work flow. 
Except clang, the other blocks need to be extended for a new backend.

I create a Cpu0 machine by Verilog language. 
And generate the simulator with Icarus verilog compiler.
As you know the front end is machine independent. 
It transfer C or C++ language into IR format.
The IR format is machine independent.
So, there is no work in clang.

I develop Cpu0 backend compiler under LLVM and the Cpu0 backend compiler will be triggered
by llc command.
Beyond that, I extend the lld structure to support Cpu0 backend.
Then those obj files which compiled by llc command can be linked together
into a exe file.
Since verilog machine accept hex input file format,
I write elf2hex program to transfer exe file format into hex file format.

Finally, I can see the run result on the verilog machine, 
and those compiler and linker I designed can be verified.

